@model SciBuy.Models.CreateArticleViewModel

@{
    ViewBag.Title = "CreateArticle";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<script type="text/javascript" src="~/Scripts/tinymce/tinymce.min.js"></script>
<script type="text/javascript">
    tinyMCE.init({
        selector: '#editor',
        theme: 'modern',
        language: 'ru',
        height: 300,
        plugins:["image"]
    });
</script>

@Styles.Render("~/Content/dropzonescss")
@Scripts.Render("~/bundles/dropzonescripts")

<script type="text/javascript">
    //File Upload response from the server
    Dropzone.options.dropzoneForm = {
        init: function () {
            this.on("complete", function (data) {
                //var res = eval('(' + data.xhr.responseText + ')');
                var res = JSON.parse(data.xhr.responseText);
            });
        }
    };
</script>

@using (Html.BeginForm("CreateArticle"))
{
    @Html.ValidationSummary()
    
    @Html.TextBoxFor(M => M.Name)
    
    @Html.TextAreaFor(M => M.Content, new { @id="editor" })//сюда подключается tinyMCE

    @Html.HiddenFor(M => M.Author.Id)//Позже сделаю через httpcontext и выпилю это поле

    @Html.HiddenFor(M => M.ArticleID)

    

    <input type="submit" value="Создать" />
}  
@*<style>
    #dropZone {
        background: gray;
        border: black dashed 3px;
        width: 200px;
        padding: 50px;
        text-align: center;
        color: white;
    }
</style>*@
<div class="row">
    <div class="col-lg-12">
        <div class="jumbotron">
            <form action="~/Article/SaveUploadedFile" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm">
                <div class="fallback">
                    <input name="file" type="file" multiple />
                    <input type="submit" value="Upload" />
                </div>
            </form>
        </div>
    </div>
</div>




